##
## Copyright 2017-2021 the original author or authors.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
## either express or implied. See the License for the specific language
## governing permissions and limitations under the License.
##
##########################################################################################
##### Ready for generation.
##########################################################################################
#set ($remoteApiLogic = $scriptEngine.get('remoteApiLogic'))
#set ($rule = $scriptEngine.get('remoteApiRule'))
##
##########################################################################################
##### Copyright & package & import.
##########################################################################################
${manager.allClassCopyright}package ${data.package};

#set ($importList = [])
#set($added = $importList.add('org.lastaflute.web.servlet.request.RequestManager'))
#set($added = $importList.add("${data.abstractBehavior.package}.${data.abstractBehavior.className}"))
#if ($rule['behaviorMethodGeneration'])
#set($added = $importList.add('java.util.function.Consumer'))
#set($added = $importList.add('org.dbflute.remoteapi.FlutyRemoteApiRule'))
#foreach($method in $data.methodList)
#if (${method.paramBean.className})
#set($added = $importList.add("${method.paramBean.package}.${method.paramBean.className}"))
#end
#if (${method.returnBean.package} && ${method.returnBean.className})
#set($added = $importList.add("${method.returnBean.package}.${method.returnBean.className}"))
#end
#end
#end
#set ($categolizedImportClassList = $scriptEngine.invokeMethod($remoteApiLogic, 'deriveCategolizedImportClassList', $importList, $data.package, $scriptEngine.invokeMethod($rule, 'importOrderList')))
#foreach($categolizedImportClass in $categolizedImportClassList)
#foreach($importClass in $categolizedImportClass)
import ${importClass};
#end

#end
##
##########################################################################################
##### Class definition.
##########################################################################################
/**
 * The base class as generation gap for remote API of ${data.remoteApiExp}.
 * @author FreeGen
 */
public abstract class ${data.className} extends ${data.abstractBehavior.className} {

    // ===================================================================================
    //                                                                         Constructor
    //                                                                         ===========
    /**
     * @param requestManager The manager of request, LastaFlute component. (NotNull)
     */
    public ${data.className}(RequestManager requestManager) {
        super(requestManager);
    }
##########################################################################################
##### Method definition.
##########################################################################################
#set ($behaviorMethodList = $scriptEngine.invokeMethod($remoteApiLogic, 'deriveBehaviorMethodList', $rule, $data.methodList))
#foreach($behaviorMethod in $behaviorMethodList)

#if ($foreach.index == 0)
    // ===================================================================================
    //                                                                             Execute
    //                                                                             =======
#end
##########################################################################################
########## Method definition. request method.
##########################################################################################
    /**
     * Request remote call to ${behaviorMethod.method.api.url}. (auto-generated method)<br>
     * <pre>
     * url: $behaviorMethod.method.api.url
     * httpMethod: $behaviorMethod.method.api.httpMethod.toUpperCase()
     * </pre>
#foreach($parameter in ${behaviorMethod.parameterList})
     * @param $parameter.name $parameter.description
#end
#if (${behaviorMethod.returnBeanClassName} != 'void')
     * @return The bean object as return type, receiving response body. (NotNull)
#end
     */
    $rule['behaviorMethodAccessModifier'] ${behaviorMethod.returnBeanClassName} ${behaviorMethod.behaviorRequestMethodName}($!{behaviorMethod.parameterDefinition}) {
       #if (${behaviorMethod.returnBeanClassName} != 'void') return#end do$manager.initCap(${behaviorMethod.behaviorRequestMethodName})(#foreach($parameter in ${behaviorMethod.parameterList})$parameter.name, #{end}rule -> {});
    }

##########################################################################################
########## Method definition. doRequest method.
##########################################################################################
    /**
     * Request remote call to ${behaviorMethod.method.api.url}. (auto-generated method)<br>
     * <pre>
     * url: $behaviorMethod.method.api.url
     * httpMethod: $behaviorMethod.method.api.httpMethod.toUpperCase()
     * </pre>
#foreach($parameter in ${behaviorMethod.parameterList})
     * @param $parameter.name $parameter.description
#end
     * @param ruleLambda The callback for setting rule as dynamic requirement. (NotNull)
#if (${behaviorMethod.returnBeanClassName} != 'void')
     * @return The bean object as return type, receiving response body. (NotNull)
#end
     */
    protected ${behaviorMethod.returnBeanClassName} do$manager.initCap(${behaviorMethod.behaviorRequestMethodName})($!{behaviorMethod.parameterDefinitionRule}) {
#if (${behaviorMethod.paramBeanClassName})
#if ($behaviorMethod.method.paramBeanArray)
        ${behaviorMethod.paramBeanClassName} param = new java.util.ArrayList<${behaviorMethod.method.paramBean.className}>();
#else
        ${behaviorMethod.paramBeanClassName} param = new ${behaviorMethod.paramBeanClassName}();
#end
        paramLambda.accept(param);
#end
#if (${behaviorMethod.returnBeanClassName.contains('<')})
#set ($returnType = "new org.lastaflute.di.helper.misc.ParameterizedRef<${behaviorMethod.returnBeanClassName}>() {
        }.getType()")
#else
#set ($returnType = "${behaviorMethod.returnBeanClassName}.class")
#end
        #if (${behaviorMethod.returnBeanClassName} != 'void')return #{end}${behaviorMethod.callDoRequestMethodName}($returnType, "${behaviorMethod.method.api.url}", ${behaviorMethod.moreUrl}, ${behaviorMethod.param}, rule -> {
#if ($behaviorMethod.method.paramBean.in == 'formData')
            rule.sendBodyBy(
                    new org.lastaflute.remoteapi.sender.body.LaFormSender(new org.dbflute.remoteapi.mapping.FlVacantMappingPolicy()));
#end
            ${behaviorMethod.behaviorRuleMethodName}(rule);
            ruleLambda.accept(rule);
        });
    }

##########################################################################################
########## Method definition. ruleOf method.
##########################################################################################
    /**
     * Set up method-level rule of ${behaviorMethod.method.api.url}.<br>
     * @param rule The rule that class default rule is already set. (NotNull)
     */
    protected void ${behaviorMethod.behaviorRuleMethodName}(FlutyRemoteApiRule rule) {
    }
#end
}
